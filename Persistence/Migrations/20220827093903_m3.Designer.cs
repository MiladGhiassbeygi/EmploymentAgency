// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220827093903_m3")]
    partial class m3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.WriteModel.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.WriteModel.EducationalBackground", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Degree")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FieldOfStudy")
                        .HasColumnType("text");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("School")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("EducationalBackgrounds");
                });

            modelBuilder.Entity("Domain.WriteModel.Employer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DefinerId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("text");

                    b.Property<decimal>("ExactAmountRecived")
                        .HasColumnType("numeric");

                    b.Property<byte>("FieldOfActivityId")
                        .HasColumnType("smallint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("text");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NecessaryExplanation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("text");

                    b.Property<string>("WebsiteLink")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DefinerId");

                    b.HasIndex("FieldOfActivityId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Domain.WriteModel.EmployerAcivityField", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmployerAcivityFields");
                });

            modelBuilder.Entity("Domain.WriteModel.EmployerCommission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("EmployerCommissions");
                });

            modelBuilder.Entity("Domain.WriteModel.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("AnnualLeave")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ExactAmountRecived")
                        .HasColumnType("money");

                    b.Property<string>("HireCompanies")
                        .HasColumnType("text");

                    b.Property<int>("HoursOfWork")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("SalaryMax")
                        .HasColumnType("money");

                    b.Property<decimal>("SalaryMin")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.WriteModel.JobCommission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("boolean");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobCommissions");
                });

            modelBuilder.Entity("Domain.WriteModel.JobEssentialSkills", b =>
                {
                    b.Property<short>("SkillId")
                        .HasColumnType("smallint");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("SkillId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobEssentialSkills");
                });

            modelBuilder.Entity("Domain.WriteModel.JobSeeker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DefinerId")
                        .HasColumnType("integer");

                    b.Property<int>("EducationalBackgroundId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("LinkedinAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ResumeFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DefinerId");

                    b.ToTable("JobSeekers");
                });

            modelBuilder.Entity("Domain.WriteModel.JobUnnecessarySkills", b =>
                {
                    b.Property<short>("SkillId")
                        .HasColumnType("smallint");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("SkillId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobUnnecessarySkills");
                });

            modelBuilder.Entity("Domain.WriteModel.ReminderData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NoteTitle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReminderData");
                });

            modelBuilder.Entity("Domain.WriteModel.Skill", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Percentage")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Domain.WriteModel.SuccessedContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("ContractCreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2022, 8, 27, 14, 9, 3, 721, DateTimeKind.Local).AddTicks(420));

                    b.Property<bool>("IsAmountFixed")
                        .HasColumnType("boolean");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractCreatorId");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("SuccessedContracts");
                });

            modelBuilder.Entity("Domain.WriteModel.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "usr");
                });

            modelBuilder.Entity("Domain.WriteModel.User.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedClaim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "usr");
                });

            modelBuilder.Entity("Domain.WriteModel.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("GeneratedCode")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SaltPassword")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "usr");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "usr");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("LoggedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "usr");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens", "usr");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedUserRoleDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "usr");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("GeneratedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "usr");
                });

            modelBuilder.Entity("Domain.WriteModel.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HireCompanies")
                        .HasColumnType("text");

                    b.Property<int>("HoursOfWork")
                        .HasColumnType("integer");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("SalaryPaid")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TypeOfCooperation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("Domain.WriteModel.WorkExperienceSkill", b =>
                {
                    b.Property<short>("SkillId")
                        .HasColumnType("smallint");

                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("integer");

                    b.HasKey("SkillId", "WorkExperienceId");

                    b.HasIndex("WorkExperienceId");

                    b.ToTable("WorkExperienceSkills");
                });

            modelBuilder.Entity("Domain.WriteModel.EducationalBackground", b =>
                {
                    b.HasOne("Domain.WriteModel.JobSeeker", "JobSeeker")
                        .WithMany("EducationalBackgrounds")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobSeeker_JobseekerEducationalBackground");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("Domain.WriteModel.Employer", b =>
                {
                    b.HasOne("Domain.WriteModel.User.User", "Definer")
                        .WithMany("Employers")
                        .HasForeignKey("DefinerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Employer_EmployerDefiner");

                    b.HasOne("Domain.WriteModel.EmployerAcivityField", "FieldOfActivity")
                        .WithMany("EmployerDetails")
                        .HasForeignKey("FieldOfActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Employer_EmployerAcivityField");

                    b.Navigation("Definer");

                    b.Navigation("FieldOfActivity");
                });

            modelBuilder.Entity("Domain.WriteModel.EmployerCommission", b =>
                {
                    b.HasOne("Domain.WriteModel.Employer", "Employer")
                        .WithMany("EmployerCommission")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerCommission_Employer");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Domain.WriteModel.Job", b =>
                {
                    b.HasOne("Domain.WriteModel.Employer", "Employer")
                        .WithMany("Job")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_EmployerInformation");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Domain.WriteModel.JobCommission", b =>
                {
                    b.HasOne("Domain.WriteModel.Job", "Job")
                        .WithMany("JobCommission")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobCommission_JobDefinition");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.WriteModel.JobEssentialSkills", b =>
                {
                    b.HasOne("Domain.WriteModel.Job", "Job")
                        .WithMany("JobEssentialSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobEssentialSkills_Job");

                    b.HasOne("Domain.WriteModel.Skill", "Skill")
                        .WithMany("JobEssentialSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobEssentialSkills_Skill");

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.WriteModel.JobSeeker", b =>
                {
                    b.HasOne("Domain.WriteModel.Country", "Country")
                        .WithMany("JobSeeker")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_JobSeeker_Country");

                    b.HasOne("Domain.WriteModel.User.User", "Definer")
                        .WithMany("JobSeekers")
                        .HasForeignKey("DefinerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobSeeker_JobSeekerDefiner");

                    b.Navigation("Country");

                    b.Navigation("Definer");
                });

            modelBuilder.Entity("Domain.WriteModel.JobUnnecessarySkills", b =>
                {
                    b.HasOne("Domain.WriteModel.Job", "Job")
                        .WithMany("JobUnnecessarySkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobUnnecessarySkills_Job");

                    b.HasOne("Domain.WriteModel.Skill", "Skill")
                        .WithMany("JobUnnecessarySkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobUnnecessarySkills_Skill");

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.WriteModel.SuccessedContract", b =>
                {
                    b.HasOne("Domain.WriteModel.User.User", "ContractCreator")
                        .WithMany()
                        .HasForeignKey("ContractCreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.WriteModel.Job", "Job")
                        .WithMany("SuccessedContract")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SuccessedContract_Job");

                    b.HasOne("Domain.WriteModel.JobSeeker", "JobSeeker")
                        .WithMany("SuccessedContract")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SuccessedContract_JobSeeker");

                    b.Navigation("ContractCreator");

                    b.Navigation("Job");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("Domain.WriteModel.User.RoleClaim", b =>
                {
                    b.HasOne("Domain.WriteModel.User.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserClaim", b =>
                {
                    b.HasOne("Domain.WriteModel.User.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserLogin", b =>
                {
                    b.HasOne("Domain.WriteModel.User.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserRefreshToken", b =>
                {
                    b.HasOne("Domain.WriteModel.User.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserRole", b =>
                {
                    b.HasOne("Domain.WriteModel.User.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.WriteModel.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.WriteModel.User.UserToken", b =>
                {
                    b.HasOne("Domain.WriteModel.User.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.WriteModel.WorkExperience", b =>
                {
                    b.HasOne("Domain.WriteModel.JobSeeker", "JobSeeker")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobSeeker_JobseekerWorkExperience");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("Domain.WriteModel.WorkExperienceSkill", b =>
                {
                    b.HasOne("Domain.WriteModel.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_Skill_WorkExperience");

                    b.HasOne("Domain.WriteModel.WorkExperience", "WorkExperience")
                        .WithMany()
                        .HasForeignKey("WorkExperienceId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkExperience_Skill");

                    b.Navigation("Skill");

                    b.Navigation("WorkExperience");
                });

            modelBuilder.Entity("Domain.WriteModel.Country", b =>
                {
                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("Domain.WriteModel.Employer", b =>
                {
                    b.Navigation("EmployerCommission");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.WriteModel.EmployerAcivityField", b =>
                {
                    b.Navigation("EmployerDetails");
                });

            modelBuilder.Entity("Domain.WriteModel.Job", b =>
                {
                    b.Navigation("JobCommission");

                    b.Navigation("JobEssentialSkills");

                    b.Navigation("JobUnnecessarySkills");

                    b.Navigation("SuccessedContract");
                });

            modelBuilder.Entity("Domain.WriteModel.JobSeeker", b =>
                {
                    b.Navigation("EducationalBackgrounds");

                    b.Navigation("SuccessedContract");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Domain.WriteModel.Skill", b =>
                {
                    b.Navigation("JobEssentialSkills");

                    b.Navigation("JobUnnecessarySkills");
                });

            modelBuilder.Entity("Domain.WriteModel.User.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.WriteModel.User.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Employers");

                    b.Navigation("JobSeekers");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
